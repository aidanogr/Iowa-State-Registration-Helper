package com.ogradytech.registration;

import static com.codename1.ui.CN.*;

import java.util.ArrayList;

import com.codename1.system.Lifecycle;
import com.codename1.ui.*;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.*;
import com.codename1.io.*;
import com.codename1.ui.plaf.*;
import com.codename1.ui.table.TableLayout;
import com.codename1.ui.util.Resources;
import com.ogradytech.registration.Utilities.InstructionalDialog;
import com.ogradytech.registration.exceptions.FormSubmissionException;
import com.ogradytech.registration.exceptions.FormSubmissionException.ExceptionType;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class IowaStateRegistrationHelper extends Lifecycle {
	
	public static final int maxNumberOfClasses = 10; 
	public static Form inputForm;

    @Override
    public void runApp() {
       
    	showPreface();
    	showInputForm();	//upon form submission,
   }
    

    public static void showPreface() {
    	    	
    	//todo: make this a InstructionalDialog
        Dialog preface = new Dialog();
        TextArea prefaceTitle = new TextArea("Iowa State Registration Helper ");
        prefaceTitle.setEndsWith3Points(false);
        prefaceTitle.setUIID("DialogTitle");
        prefaceTitle.setEditable(false);
        prefaceTitle.setFocusable(false);

        preface.add(prefaceTitle);

        TextArea prefaceBody = new TextArea("Enter up to " + maxNumberOfClasses + " desired classes and hit generate to view potential schedules."
        		+ " If a class has a discussion section, make sure to click checkbox next to class. Course sections waitlisted or closed are not included"
        		+ "in generated schedules");
        prefaceBody.setEndsWith3Points(false);
        prefaceBody.setUIID("DialogBody");
        prefaceBody.setEditable(false);
        prefaceBody.setFocusable(false);

        preface.add(prefaceBody);
        
        Button prefaceExitButton = new Button("Close this window");
        prefaceExitButton.setUIID("Button");
        prefaceExitButton.addActionListener(evt -> {
        	preface.dispose();
        });
        
        preface.add(prefaceExitButton);
        
        preface.show();
        
    }

    public static void showInputForm() {
    	inputForm = new Form("Class Input", BoxLayout.y());

        TableLayout classInputContainerLayout = new TableLayout(maxNumberOfClasses + 1, 2); // +1 for labels
        Container classInputContainer = new Container(classInputContainerLayout);
        
        TableLayout.Constraint textCol = classInputContainerLayout.createConstraint();
        textCol.widthPercentage(70);
        textCol.setHorizontalAlign(Component.CENTER);
        textCol.setVerticalAlign(Component.CENTER);
        
        TableLayout.Constraint checkCol = classInputContainerLayout.createConstraint();
        checkCol.widthPercentage(30);
        checkCol.setHorizontalAlign(Component.CENTER);
        checkCol.setVerticalAlign(Component.CENTER);

        Label classNameLabel = new Label("Course ID (i.e ENGL 2500)");
        classInputContainer.add(textCol, classNameLabel);
        Label classHasDiscussionLabel = new Label("Discussion?");
        classInputContainer.add(checkCol, classHasDiscussionLabel);
        
        TextField[] classInputs = new TextField[maxNumberOfClasses];
        CheckBox[] classContainsDiscussionBoxes = new CheckBox[maxNumberOfClasses];
        for(int i = 0; i < maxNumberOfClasses; i++) {
        	TextField classInput = classInputs[i];
        	classInput = new TextField();
        	classInputContainer.add(textCol, classInput);
        	
        	CheckBox classContainsDiscussionBox = classContainsDiscussionBoxes[i];
        	classContainsDiscussionBox = new CheckBox();
        	classInputContainer.add(checkCol, classContainsDiscussionBox);
        }
        inputForm.add(classInputContainer);

        Button submitFormButton = new Button("Generate Schedules");
        submitFormButton.addActionListener(evt -> { 
        	try {
        		formSubmitted(classInputs, classContainsDiscussionBoxes); 
        	} catch(FormSubmissionException e) {
        		handleFormSubmissionException(e);
        	}
        });;
        
        inputForm.add(submitFormButton);
        inputForm.show();
    }
    

    /**
     * function attempts to build JSON string of input classes as long as they exist and 
     * forward it 
     * @param classContainsDiscussionBoxes 
     * @param classInputs 
     * @throws FormSubmissionException
     */
    public static void formSubmitted(TextField[] classInputs, CheckBox[] classContainsDiscussionBoxes) throws FormSubmissionException {
    	ArrayList<Integer> validClassInputs = new ArrayList<>(10);
    	for(int i = 0 ; i < classInputs.length; i++) {
    		
    	}
    }
    
    public static void handleFormSubmissionException(FormSubmissionException e) {
    	
    	InstructionalDialog d = new InstructionalDialog("DialogTitle", "DialogBody");

    	d.title.setText("An Error has occured");

    	switch(e.getExceptionType()) {
			case CLASS_NOT_FOUND:
				d.body.setText("Class(es) that you have entered could not be found: \n" + e.getMessage()
						+ "\nPlease ensure your input is matches the following format exactly:\n"
						+ "DEPT COURSE_NUMBER\n"
						+ "i.e COMS 2280");
				break;
			case NO_CLASSES_SUBMITTED:
				d.body.setText("Please enter at least 1 class");
				break;
    	}
    	
    	d.show();
    }   
}
