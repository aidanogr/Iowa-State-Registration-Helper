package com.ogradytech.registration;

import static com.codename1.ui.CN.*;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import com.codename1.system.Lifecycle;
import com.codename1.ui.*;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.*;
import com.codename1.io.*;
import com.codename1.ui.plaf.*;
import com.codename1.ui.table.TableLayout;
import com.codename1.ui.util.Resources;
import com.codename1.util.regex.StringReader;
import com.ogradytech.registration.Utilities.MeetingInfo;
import com.ogradytech.registration.Utilities.ParsingUtilities;
import com.ogradytech.registration.exceptions.FormSubmissionException;
import com.ogradytech.registration.exceptions.FormSubmissionException.ExceptionType;
import com.ogradytech.registration.gui.CalendarItem;
import com.ogradytech.registration.gui.InstructionalDialog;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class IowaStateRegistrationHelper extends Lifecycle {
	public static int networkRequestCounter = 0;
	public static final int maxNumberOfClasses = 10; 
	public static Form inputForm;
	public static ArrayList<CalendarItem> calendarCourseInformation = new ArrayList<>(10);
    @Override
    public void runApp() {
       
    	showPreface();
    	showInputForm();	// calls "formSubmitted()" once complete. Function now controls flow of program.

    	
   }
    

    public static void showPreface() {
    	    	
    	InstructionalDialog preface = new InstructionalDialog("DialogTitle", "DialogBody");
        preface.title.setText("Iowa State Registration Helper ");
        preface.body.setText("Enter up to " + maxNumberOfClasses + " desired classes and hit generate to view potential schedules."
        		+ " If a class has a discussion section, make sure to click checkbox next to class. Course sections waitlisted or closed are not included"
        		+ "in generated schedules");

        
        preface.show();
        
    }

    public static void showInputForm() {
    	inputForm = new Form("Class Input", BoxLayout.y());

        TableLayout classInputContainerLayout = new TableLayout(maxNumberOfClasses + 1, 2); // +1 for labels
        Container classInputContainer = new Container(classInputContainerLayout);
        
        TableLayout.Constraint textCol = classInputContainerLayout.createConstraint();
        textCol.widthPercentage(70);
        textCol.setHorizontalAlign(Component.CENTER);
        textCol.setVerticalAlign(Component.CENTER);
        
        TableLayout.Constraint checkCol = classInputContainerLayout.createConstraint();
        checkCol.widthPercentage(30);
        checkCol.setHorizontalAlign(Component.CENTER);
        checkCol.setVerticalAlign(Component.CENTER);

        Label classNameLabel = new Label("Course ID (i.e ENGL 2500)");
        classInputContainer.add(textCol, classNameLabel);
        Label classHasDiscussionLabel = new Label("Discussion?");
        classInputContainer.add(checkCol, classHasDiscussionLabel);
        
        TextField[] classInputs = new TextField[maxNumberOfClasses];
        CheckBox[] classContainsDiscussionBoxes = new CheckBox[maxNumberOfClasses];
        for(int i = 0; i < maxNumberOfClasses; i++) {

        	TextField classInput = new TextField("");
        	classInput.setMaxSize(15);
        	classInputs[i] = classInput;
        	classInputContainer.add(textCol, classInput);
        	
        	CheckBox classContainsDiscussionBox = new CheckBox();
        	classContainsDiscussionBoxes[i] = classContainsDiscussionBox;
        	classInputContainer.add(checkCol, classContainsDiscussionBox);
        }
        inputForm.add(classInputContainer);

        Button submitFormButton = new Button("Generate Schedules");
        submitFormButton.addActionListener(evt -> { 
        	try {
        		formSubmitted(classInputs, classContainsDiscussionBoxes); 
        	} catch(FormSubmissionException e) {
        		handleFormSubmissionException(e);
        	}
        });;
        
        inputForm.add(submitFormButton);
        inputForm.show();
    }
    

    /**
     * 
     * forward it 
     * @param classContainsDiscussionBoxes 
     * @param classInputs 
     * @throws FormSubmissionException
     */
    public static void formSubmitted(TextField[] classInputs, CheckBox[] classContainsDiscussionBoxes) throws FormSubmissionException {
    	ArrayList<Integer> validClassInputs = new ArrayList<>(10);
    	for(int i = 0 ; i < classInputs.length; i++) {
    		if(!classInputs[i].getText().trim().isEmpty()) validClassInputs.add(i);
    	}
    	
    	if(validClassInputs.size() == 0) {
    		throw new FormSubmissionException(ExceptionType.NO_CLASSES_SUBMITTED, "");
    	}
    	ArrayList<String> departmentFullNames = new ArrayList<String>(10);
    	for(int i = 0; i < validClassInputs.size(); i++) {
    		try {
    			String validClassName = ParsingUtilities.stripLeadingAndTrailingWhiteSpace(
    						classInputs[validClassInputs.get(i)].getText()
    					);
				int delimiterIndex = validClassName.indexOf(" ");
				if(delimiterIndex == -1) {
					throw new FormSubmissionException(ExceptionType.BAD_FORMAT, validClassName);
				}				
				String departmentFullName = ParsingUtilities.getDepartmentFromFullCourseName(validClassName);
				String courseIDString = validClassName.substring(delimiterIndex + 1, validClassName.length()).trim();
				
				int courseID = Integer.valueOf(courseIDString); //exception can be thrown here
				if(courseID < 101 || courseID > 7000) {
					throw new NumberFormatException();
				}
				
				requestCourseInfo(departmentFullName, courseIDString, classContainsDiscussionBoxes[i].isSelected());
				
				System.out.println(departmentFullName);
				System.out.println(courseID);
			} catch (IOException e) {
				throw new FormSubmissionException(FormSubmissionException.ExceptionType.IO_EXCEPTION, "");
			} catch (NumberFormatException e) {
				throw new FormSubmissionException(ExceptionType.BAD_FORMAT, "Please enter valid courseID");
			} catch (FormSubmissionException e) {
				throw e;
			}
    	}
    }
    
    //TODO this should probably throw something
    private static void requestCourseInfo(String departmentFullName, String courseIDString, boolean classContainsDiscussion) {
		networkRequestCounter++;
		System.out.println("\nNetwork request counter: " + networkRequestCounter);
    	String template = " {\n" +
    			  "\"academicPeriodId\": \"ACADEMIC_PERIOD-2025Fall\",\n" + //TODO make academic period programatic...
    			  "\"department\": \"" + departmentFullName + "\",\n" + 
    			  "\"courseId\": \""+ courseIDString + "\",\n" +
    			  "\"level\": null,\n" +
    			  "\"requirement\": null,\n" +
    			  "\"instructor\": \"\",\n" +
    			  "\"semesterTag\": null,\n" +
    			  "\"credits\": null,\n" +
    			  "\"openSeats\": true,\n" +
    			  "\"daysOfTheWeek\": [],\n" +
    			  "\"sectionStartDate\": null,\n" +
    			  "\"sectionEndDate\": null,\n" +
    			  "\"title\": \"\",\n" +
    			  "\"deliveryMode\": null,\n" +
    			  "\"allowedGradingBases\": []\n" +
    			  "} ";
    	ConnectionRequest r = new ConnectionRequest();
    	r.setPost(true);
    	r.setUrl("https://api.classes.iastate.edu/api/courses/search");
    	r.setRequestBody(template);
    	r.addRequestHeader("Accept", "application/json, text/plain, */*");
    	r.addRequestHeader("Accept-Encoding", "gzip, deflate, br, zstd");
    	r.addRequestHeader("Accept-Language", "en-US,en;q=0.9");
    	r.addRequestHeader("Content-Length", String.valueOf(template.length()));
    	r.addRequestHeader("Content-Type", "application/json");
    	
    	//this should not need to be syncronized, 1 current background thread worker. but if more desired we need to change this
    	r.addResponseListener(evt -> {
    		String body = new String(r.getResponseData());
    		parseAndStoreClassData(body);
    		
    		System.out.println(body);
    	});
    	
    	NetworkManager.getInstance().addToQueue(r);
	}


    /**
     * Stores parsed JSON in global  "calendarCourseInformation" list (see top of file)
     * @param body JSON of the request body, specifically for api.classes.iastate.edu/api/courses/search
     */
	@SuppressWarnings("unchecked")
	private static void parseAndStoreClassData(String body) {
		// TODO Auto-generated method stub
		JSONParser bodyParser = new JSONParser();
		StringReader reader = new StringReader(body);
		Map<String, Object> parsedJSON;
		try {
			parsedJSON = bodyParser.parseJSON(reader);
			//TODO this might be the ugliest line of code i've ever written. I might just roll my own JSON parser
			//update: i tried to roll my own json parser and it sucked. ugly code is okay ig
			Map<String, Object> classFound =  ((java.util.List<Map<String, Object>>)parsedJSON.get("data")).get(0);
			CalendarItem classItem = new CalendarItem((String) classFound.get("courseId"));

			java.util.List<Map<String,Object>> sections = (List<Map<String, Object>>) classFound.get("sections");
			if(sections.size() < 1) { System.err.println("Assertion failed; sections size < 1"); return; } //TODO throw exception here?
			String meetingType = (String) sections.get(0).get("instructionalFormat"); //we need to check if there are multiple instruction formats under the same class (i.e COMS 2270 has lecture and discussion)
			for(int i = 0; i < sections.size(); i++) {
				Map<String,Object> section = sections.get(i);
				if(!meetingType.equals((String) section.get("instructionalFormat"))) {
					System.err.println("poopy scoopy");
				}
				classItem.addMeetingInfo(
						(String) section.get("number"),new MeetingInfo((String) section.get("meetingPatterns"))
					);
				classItem.debugPrint();
			}
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}


	public static void handleFormSubmissionException(FormSubmissionException e) {


    	InstructionalDialog d = new InstructionalDialog("DialogTitle", "DialogBody");

    	d.title.setText("An Error has occured");

    	switch(e.getExceptionType()) {
			case CLASS_NOT_FOUND:
				d.body.setText("Class(es) that you have entered could not be found: \n" + e.getMessage()
						+ "\nPlease ensure your input is matches the following format exactly:\n"
						+ "DEPT COURSE_NUMBER\n"
						+ "i.e COMS 2280");
				break;
			case NO_CLASSES_SUBMITTED:
				d.body.setText("Please enter at least 1 class");
				break;
			case BAD_FORMAT:
				d.body.setText("A class you have entered has a bad format: \n" + e.getMessage());
				break;
			default:
				d.body.setText("An unexpected error has occured. Please contact aidan@ogradytech.com with details of your crash if"
						+ " problem persists " + e.getExceptionType().name() + "\n\n" + e.getStackTrace());
				e.printStackTrace();
				break;
    	}
    	
    	d.show();
    }   
}
